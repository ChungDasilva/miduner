<?php

require_once './app/Main/Helpers/common.php';

if (isset($argv[1]) && strtolower($argv[1]) != 'config:cache') {
    require_once './app/Main/Autoload.php';
    /**
     * Miduner - A PHP Framework For Amatur
     *
     * @package  Miduner
     * @author   Dang Anh <danganh.dev@gmail.com>
     */
    $config = require_once './cache/app.php';
    new Autoload($config);
}
switch (strtolower($argv[1])) {
    case 'config:cache':
        foreach (scandir('cache') as $file) {
            if ($file != '.' && $file != '..' && $file != '.gitignore') {
                unlink("cache/$file");
            }
        }
        system("echo " . 'Configuration cache cleared!');
        $env = readDotENV();
        $myfile = fopen("cache/environments.php", "w") or die("Unable to open file!");
        fwrite($myfile, "<?php\n");
        fwrite($myfile, "return array(\n");
        foreach ($env as $key => $value) {
            $key = trim($key);
            $value = trim($value);
            fwrite($myfile, "    '{$key}' => '{$value}',\n");
        }
        fwrite($myfile, ");");
        // environments
        foreach (scandir('config') as $file) {
            if (strlen($file) > 5) {
                $config = include './config/' . $file;
                $myfile = fopen("cache/$file", "w") or die("Unable to open file!");
                fwrite($myfile, "<?php\n");
                fwrite($myfile, "return array(\n");
                foreach ($config as $key => $value) {
                    fwrite($myfile, "    '{$key}' => ");
                    if (is_array($value)) {
                        fwrite($myfile, "array(\n");
                        foreach ($value as $k => $v) {
                            fwrite($myfile, "        '{$k}' => '{$v}',\n");
                        }
                        fwrite($myfile, "    ),\n");
                    } else {
                        fwrite($myfile, "'{$value}',\n");
                    }
                }
                fwrite($myfile, ");");
            }
        }
        system("echo " . 'Configuration cached successfully!');
        break;
    case 'db:seed':
        system("echo " . 'Seeded');
        break;
    case 'migrate':
        foreach (scandir('database/migration', 1) as $file) {
            if (strlen($file) > 5) {
                include './database/migration/' . $file;
                $classes = get_declared_classes();
                $class = end($classes);
                system("echo " . 'Migrating: ' . $class);
                $object = new $class;
                system("echo " . 'Migrated: ' . $class);
            }
        }
        break;
    case 'ser':
        $host = '127.0.0.1';
        $port = '8000';
        if (isset($argv[2])) {
            if (strpos($argv[2], '--host=') !== false) {
                $host = str_replace('--host=', '', $argv[2]);
            }
        }
        if (isset($argv[3])) {
            if (strpos($argv[3], '--port=') !== false) {
                $port = str_replace('--port=', '', $argv[3]);
            }
        }
        system("echo " . "Starting development at: http://{$host}:{$port}");
        system("php -S {$host}:{$port} server.php");
    case 'key:':
        $env = '.env';
        $file_contents = file_get_contents($env);
        $each = explode("\n", $file_contents);
        $file = fopen($env, 'w');
        for ($i = 0; $i <= count($each) - 1; $i++) {
            if ($i == count($each) - 1) {
                if (strlen($each[$i]) <= 0) {
                    continue;
                }
            }
            $value = $each[$i];
            if (strpos($value, 'APP_KEY') !== false) {
                $value = 'APP_KEY=' . base64_encode(microtime(true));
            }
            fwrite($file, $value . "\n");
        }
        fclose($file);
        break;
    default:
        # code...
        break;
}
